From f28e5723cd9d3087fd800b052772aa6ba21fe63a Mon Sep 17 00:00:00 2001
From: Vlad G <b100dian@gmail.com>
Date: Sun, 16 May 2021 14:16:59 +0300
Subject: [PATCH] Partial revert of 29 and 39 system/core patches

Change-Id: Ife8dc6d02ab4ef08253d5cfbb08653822d110f8c
---
 init/Android.bp                            |  3 +++
 init/init.cpp                              |  5 ++---
 init/selinux.cpp                           | 12 ++----------
 libprocessgroup/setup/cgroup_map_write.cpp |  8 ++++----
 4 files changed, 11 insertions(+), 17 deletions(-)

diff --git a/init/Android.bp b/init/Android.bp
index 90cc1b576..377a3740c 100644
--- a/init/Android.bp
+++ b/init/Android.bp
@@ -84,6 +84,8 @@ cc_defaults {
         "liblog",
         "liblogwrap",
         "liblp",
+        "libprocessgroup",
+        "libprocessgroup_setup",
         "libselinux",
         "libutils",
     ],
@@ -247,6 +249,7 @@ cc_binary {
     shared_libs: [
         "libprotobuf-cpp-lite",
         "libhidl-gen-utils",
+        "libprocessgroup",
         "liblog",
         "libcutils",
     ],
diff --git a/init/init.cpp b/init/init.cpp
index 91d9587fb..e2d5a9af9 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -46,6 +46,8 @@
 #include <keyutils.h>
 #include <libavb/libavb.h>
 #include <libgsi/libgsi.h>
+#include <processgroup/processgroup.h>
+#include <processgroup/setup.h>
 #include <selinux/android.h>
 
 #ifndef RECOVERY
@@ -368,14 +370,11 @@ static Result<Success> console_init_action(const BuiltinArguments& args) {
 static Result<Success> SetupCgroupsAction(const BuiltinArguments&) {
     // Have to create <CGROUPS_RC_DIR> using make_dir function
     // for appropriate sepolicy to be set for it
-
-#if DISABLED_FOR_HYBRIS_SUPPORT
     make_dir(android::base::Dirname(CGROUPS_RC_PATH), 0711);
     if (!CgroupSetup()) {
         return ErrnoError() << "Failed to setup cgroups";
     }
 
-#endif
     return Success();
 }
 
diff --git a/init/selinux.cpp b/init/selinux.cpp
index 853ee03e5..e83b1fa59 100644
--- a/init/selinux.cpp
+++ b/init/selinux.cpp
@@ -85,8 +85,6 @@ selabel_handle* sehandle = nullptr;
 
 enum EnforcingStatus { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
-#if DISABLED_FOR_HYBRIS_SUPPORT
-
 EnforcingStatus StatusFromCmdline() {
     EnforcingStatus status = SELINUX_ENFORCING;
 
@@ -109,6 +107,7 @@ bool IsEnforcing() {
 
 // Forks, executes the provided program in the child, and waits for the completion in the parent.
 // Child's stderr is captured and logged using LOG(ERROR).
+[[maybe_unused]] 
 bool ForkExecveAndWaitForCompletion(const char* filename, char* const argv[]) {
     // Create a pipe used for redirecting child process's output.
     // * pipe_fds[0] is the FD the parent will use for reading.
@@ -197,7 +196,6 @@ bool ForkExecveAndWaitForCompletion(const char* filename, char* const argv[]) {
         return false;
     }
 }
-#endif
 
 bool ReadFirstLine(const char* file, std::string* line) {
     line->clear();
@@ -211,8 +209,6 @@ bool ReadFirstLine(const char* file, std::string* line) {
     return true;
 }
 
-#if DISABLED_FOR_HYBRIS_SUPPORT
-
 bool FindPrecompiledSplitPolicy(std::string* file) {
     file->clear();
     // If there is an odm partition, precompiled_sepolicy will be in
@@ -265,8 +261,6 @@ bool FindPrecompiledSplitPolicy(std::string* file) {
     return true;
 }
 
-#endif
-
 bool GetVendorMappingVersion(std::string* plat_vers) {
     if (!ReadFirstLine("/vendor/etc/selinux/plat_sepolicy_vers.txt", plat_vers)) {
         PLOG(ERROR) << "Failed to read /vendor/etc/selinux/plat_sepolicy_vers.txt";
@@ -285,8 +279,6 @@ bool IsSplitPolicyDevice() {
     return access(plat_policy_cil_file, R_OK) != -1;
 }
 
-#if DISABLED_FOR_HYBRIS_SUPPORT
-
 bool LoadSplitPolicy() {
     // IMPLEMENTATION NOTE: Split policy consists of three CIL files:
     // * platform -- policy needed due to logic contained in the system image,
@@ -431,6 +423,7 @@ bool LoadPolicy() {
     return IsSplitPolicyDevice() ? LoadSplitPolicy() : LoadMonolithicPolicy();
 }
 
+[[maybe_unused]]
 void SelinuxInitialize() {
     // Disable in Mer
     return;
@@ -457,7 +450,6 @@ void SelinuxInitialize() {
     // init's first stage can't set properties, so pass the time to the second stage.
     setenv("INIT_SELINUX_TOOK", std::to_string(t.duration().count()).c_str(), 1);
 }
-#endif
 
 }  // namespace
 
diff --git a/libprocessgroup/setup/cgroup_map_write.cpp b/libprocessgroup/setup/cgroup_map_write.cpp
index 17ea06e09..4077c81a4 100644
--- a/libprocessgroup/setup/cgroup_map_write.cpp
+++ b/libprocessgroup/setup/cgroup_map_write.cpp
@@ -288,10 +288,10 @@ bool CgroupSetup() {
 
     std::map<std::string, CgroupDescriptor> descriptors;
 
-    if (getpid() != 1) {
-        LOG(ERROR) << "Cgroup setup can be done only by init process";
-        return false;
-    }
+    // if (getpid() != 1) {
+    //     LOG(ERROR) << "Cgroup setup can be done only by init process";
+    //     return false;
+    // }
 
     // Make sure we do this only one time. No need for std::call_once because
     // init is a single-threaded process
-- 
2.31.1

